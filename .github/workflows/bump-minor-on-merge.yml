name: Bump minor on PR merge to main

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  bump-minor:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Ensure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Make tools script executable
        run: chmod +x tools/release_bump.py || true

      - name: Run release bump script
        id: bump
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail
          # Remove --dry-run to actually apply changes (this is the normal path)
          python3 tools/release_bump.py --version-file VERSION --changelog CHANGELOG.md --readme README.md --repo "${GITHUB_REPOSITORY}" | tee bump_output.txt
          NEW_TAG=$(tail -n1 bump_output.txt | tr -d '[:space:]')
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Gather PR metadata
        id: prmeta
        run: |
          PR_NUMBER=$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")
          PR_AUTHOR=$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Stage updated files and commit atomically (includes PR info)
        run: |
          set -euo pipefail
          git add VERSION CHANGELOG.md README.md || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            NEW_TAG="${{ steps.bump.outputs.new_tag }}"
            PRNUM="${{ steps.prmeta.outputs.pr_number }}"
            PRAUTH="${{ steps.prmeta.outputs.pr_author }}"
            git commit -m "chore(release): bump version to ${NEW_TAG} (from PR #${PRNUM} by @${PRAUTH})"
          fi

      - name: Create tag (annotated) - uses the v-prefixed tag
        run: |
          set -euo pipefail
          NEW_TAG="${{ steps.bump.outputs.new_tag }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists, skipping creation"
          else
            git tag -a "$NEW_TAG" -m "Release ${NEW_TAG}"
            echo "Created tag $NEW_TAG"
          fi

      - name: Push commit and tags to origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git push origin HEAD:main
          git push --tags

      - name: Create GitHub Release from tag
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.bump.outputs.new_tag }}"
          release_name: "${{ steps.bump.outputs.new_tag }}"
          body: |
            Automated release for ${{ steps.bump.outputs.new_tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
